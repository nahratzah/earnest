#pragma once

#include <algorithm>
#include <cassert>
#include <functional>
#include <iostream>
#include <iterator>

#include <asio/associated_allocator.hpp>
#include <asio/associated_executor.hpp>
#include <asio/bind_allocator.hpp>
#include <asio/bind_executor.hpp>
#include <asio/executor_work_guard.hpp>
#include <asio/write_at.hpp>

#include <earnest/detail/byte_stream.h>
#include <earnest/detail/completion_barrier.h>
#include <earnest/detail/completion_handler_fun.h>
#include <earnest/detail/completion_wrapper.h>
#include <earnest/detail/fanout.h>
#include <earnest/detail/on_scope_exit.h>
#include <earnest/detail/positional_stream_adapter.h>
#include <earnest/wal_error.h>

namespace earnest::detail {


inline auto operator<<(std::ostream& out, wal_file_entry_state state) -> std::ostream& {
  using namespace std::literals;

  switch (state) {
    default:
      out << "wal_file_entry_state{"sv << static_cast<std::underlying_type_t<wal_file_entry_state>>(state) << "}"sv;
      break;
    case wal_file_entry_state::uninitialized:
      out << "wal_file_entry_state{uninitialized}"sv;
      break;
    case wal_file_entry_state::opening:
      out << "wal_file_entry_state{opening}"sv;
      break;
    case wal_file_entry_state::ready:
      out << "wal_file_entry_state{ready}"sv;
      break;
    case wal_file_entry_state::sealing:
      out << "wal_file_entry_state{sealing}"sv;
      break;
    case wal_file_entry_state::sealed:
      out << "wal_file_entry_state{sealed}"sv;
      break;
    case wal_file_entry_state::failed:
      out << "wal_file_entry_state{failed}"sv;
      break;
  }
  return out;
}


template<typename Executor, typename Allocator>
inline wal_file_entry<Executor, Allocator>::wal_file_entry(const executor_type& ex, allocator_type alloc)
: file(ex),
  alloc_(alloc),
  strand_(ex),
  link_done_event_(ex, alloc),
  wal_flusher_(this->file, alloc),
  seal_barrier_(ex, alloc)
{}

template<typename Executor, typename Allocator>
inline auto wal_file_entry<Executor, Allocator>::header_reader_() {
  using namespace std::string_literals;

  return ::earnest::xdr_reader<>()
      & xdr_constant("\013\013earnest.wal"s).as(xdr_raw_bytes<13>)
      & xdr_uint32(version)
      & xdr_processor(
          [this]() -> std::error_code {
            if (version > max_version)
              return make_error_code(wal_errc::bad_version);
            return {};
          })
      & xdr_uint64(sequence);
}

template<typename Executor, typename Allocator>
inline auto wal_file_entry<Executor, Allocator>::header_writer_() const {
  using namespace std::string_literals;

  return ::earnest::xdr_writer<>()
      & xdr_constant("\013\013earnest.wal"s).as(xdr_raw_bytes<13>)
      & xdr_processor(
          [this]() -> std::error_code {
            if (version > max_version)
              return make_error_code(wal_errc::bad_version);
            return {};
          })
      & xdr_uint32(version)
      & xdr_uint64(sequence);
}

template<typename Executor, typename Allocator>
template<typename Stream, typename Callback>
auto wal_file_entry<Executor, Allocator>::read_records_(Stream& stream, Callback callback, std::unique_ptr<variant_type> ptr) -> void {
  link_offset_ = stream.position();
  variant_type& variant_ref = *ptr;
  async_read(
      stream,
      ::earnest::xdr_reader<>() & xdr_variant(variant_ref),
      completion_wrapper<void(std::error_code)>(
          std::move(callback),
          [wf=this->shared_from_this(), &stream, ptr=std::move(ptr)](auto h, std::error_code ec) mutable {
            wf->write_offset_ = stream.position();

            const bool done = std::holds_alternative<wal_record_end_of_records>(*ptr);
            if (!ec && !done) {
              if (wf->state_ == wal_file_entry_state::sealed) {
                std::clog << "WAL: file " << wf->name << " is bad: record after seal\n";
                ec = make_error_code(wal_errc::unrecoverable);
              } else if (std::holds_alternative<wal_record_seal>(*ptr)) {
                wf->state_ = wal_file_entry_state::sealed;
              }
            }

            if (ec || done) {
              std::invoke(h, ec);
              return;
            }

            wf->read_records_(stream, std::move(h), std::move(ptr));
          }));
}

template<typename Executor, typename Allocator>
template<typename Stream, typename Callback>
auto wal_file_entry<Executor, Allocator>::read_records_until_(Stream& stream, Callback callback, typename fd<executor_type>::offset_type end_offset, std::unique_ptr<records_vector> records) const -> void {
  if (stream.position() >= end_offset) {
    std::error_code ec;
    if (stream.position() > end_offset) [[unlikely]]
      ec = make_error_code(wal_errc::bad_read);

    auto ex = asio::get_associated_executor(callback, get_executor());
    ex.post(
        [ec, records=std::move(records), callback=std::move(callback)]() mutable {
          std::invoke(callback, ec, *records);
        },
        get_allocator());
    return;
  }

  auto raw_records_ptr = records.get();
  async_read(
      stream,
      ::earnest::xdr_reader<>() & xdr_getset<variant_type>(
          [records=raw_records_ptr](variant_type v) -> std::error_code {
            try {
              records->push_back(std::move(v));
            } catch (const std::bad_alloc&) {
              return make_error_code(wal_errc::memory_exhausted);
            }
            return std::error_code();
          }).as(xdr_variant),
      completion_wrapper<void(std::error_code)>(
          std::move(callback),
          [ wf=this->shared_from_this(), &stream, end_offset,
            records=std::move(records)
          ](auto& h, std::error_code ec) mutable {
            // We should not end up in a scenario where a record goes over the end-offset.
            if (stream.position() > end_offset) [[unlikely]]
              ec = make_error_code(wal_errc::bad_read);

            if (ec || stream.position() == end_offset) { // Done reading.
              std::invoke(h, ec, std::move(*records));
              return;
            }

            wf->read_records_until_(stream, std::move(h), end_offset, std::move(records));
          }));
}

template<typename Executor, typename Allocator>
template<typename CompletionToken>
inline auto wal_file_entry<Executor, Allocator>::write_records_to_buffer_(write_records_vector&& records, CompletionToken&& token) const {
  using byte_vector = std::vector<std::byte, rebind_alloc<std::byte>>;
  using byte_stream = byte_stream<executor_type, rebind_alloc<std::byte>>;

  return asio::async_initiate<CompletionToken, void(std::error_code, byte_vector)>(
      [](auto completion_handler, write_records_vector&& records, std::shared_ptr<const wal_file_entry> wf) {
        auto ex = asio::make_work_guard(asio::get_associated_executor(completion_handler, wf->get_executor()));

        auto state_ptr = std::make_unique<std::tuple<byte_stream, const write_records_vector, decltype(completion_handler), decltype(ex)>>(
            byte_stream(wf->get_executor(), wf->get_allocator()),
            std::move(records),
            std::move(completion_handler),
            std::move(ex));
        auto& state_ref = *state_ptr;

        write_records_to_buffer_iter_(std::move(state_ptr),
            std::get<1>(state_ref).begin(), std::get<1>(state_ref).end(), std::error_code());
      },
      token, std::move(records), this->shared_from_this());
}

template<typename Executor, typename Allocator>
template<typename State>
inline auto wal_file_entry<Executor, Allocator>::write_records_to_buffer_iter_(std::unique_ptr<State> state_ptr, typename write_records_vector::const_iterator b, typename write_records_vector::const_iterator e, std::error_code ec) -> void {
  if (b == e || ec) { // Invoke completion handler.
    auto ex = std::get<3>(*state_ptr).get_executor();
    auto alloc = asio::get_associated_allocator(std::get<2>(*state_ptr));
    ex.post(
        [state_ptr=std::move(state_ptr), ec]() mutable {
          std::invoke(std::get<2>(*state_ptr), ec, std::get<0>(std::move(*state_ptr)).data());
        },
        alloc);
    return;
  }

  auto& stream = std::get<0>(*state_ptr);
  async_write(
      stream,
      ::earnest::xdr_writer<>() & xdr_variant(*b),
      [state_ptr=std::move(state_ptr), b=std::next(b), e](std::error_code ec) mutable {
        write_records_to_buffer_iter_(std::move(state_ptr), b, e, ec);
      });
}

template<typename Executor, typename Allocator>
template<typename CompletionToken>
inline auto wal_file_entry<Executor, Allocator>::async_open(const dir& d, const std::filesystem::path& name, CompletionToken&& token) {
  using pos_stream = positional_stream_adapter<fd<executor_type>&>; // XXX replace with buffered positional stream

  if (name.has_parent_path()) throw std::runtime_error("wal file must be a filename");
  return asio::async_initiate<CompletionToken, void(std::error_code)>(
      [](auto completion_handler, const dir& d, const std::filesystem::path& name, std::shared_ptr<wal_file_entry> wf) {
        asio::dispatch(
            completion_wrapper<void()>(
                completion_handler_fun(std::move(completion_handler), wf->get_executor(), wf->strand_, wf->get_allocator()),
                [d, name, wf](auto completion_handler) {
                  {
                    std::error_code ec;
                    if (wf->state_ == wal_file_entry_state::uninitialized) [[likely]] {
                      if (wf->file.is_open()) throw std::logic_error("wal is already open");
                      wf->state_ = wal_file_entry_state::opening;
                    } else {
                      ec = make_error_code(wal_errc::bad_state);
                    }

                    if (!ec) {
                      wf->file.open(d, name, fd<executor_type>::READ_WRITE, ec);
                      if (ec) wf->state_ = wal_file_entry_state::uninitialized;
                    }

                    if (ec) {
                      completion_handler(ec);
                      return;
                    }
                    wf->name = name;
                  }

                  struct state {
                    pos_stream stream;
                  };
                  std::unique_ptr<state> s = std::make_unique<state>(
                      state{
                        .stream = pos_stream(wf->file)
                      });
                  auto& stream = s->stream;

                  async_read(
                      stream,
                      wf->header_reader_() & xdr_manual(
                          [wf](auto& stream, auto callback) {
                            wf->read_records_(
                                stream,
                                std::move(callback),
                                std::make_unique<variant_type>());
                          }),
                      completion_wrapper<void(std::error_code)>(
                          std::move(completion_handler),
                          [wf, state_ptr=std::move(s)](auto& h, std::error_code ec) mutable {
                            assert(wf->state_ == wal_file_entry_state::opening || wf->state_ == wal_file_entry_state::sealed);
                            assert(wf->write_offset_ == state_ptr->stream.position());

                            if (!ec && wf->state_ == wal_file_entry_state::opening)
                              wf->state_ = wal_file_entry_state::ready;

                            if (ec) {
                              wf->state_ = wal_file_entry_state::uninitialized;
                              wf->file.close();
                            }

                            if (!ec) wf->link_done_event_(ec);
                            std::invoke(h, ec);
                          }));
                }));
      },
      token, d, name, this->shared_from_this());
}

template<typename Executor, typename Allocator>
template<typename CompletionToken>
inline auto wal_file_entry<Executor, Allocator>::async_create(const dir& d, const std::filesystem::path& name, std::uint_fast64_t sequence, CompletionToken&& token) {
  using pos_stream = positional_stream_adapter<fd<executor_type>&>; // XXX replace with buffered positional stream

  if (name.has_parent_path()) throw std::runtime_error("wal file must be a filename");
  return asio::async_initiate<CompletionToken, void(std::error_code, link_done_event_type)>(
      [](auto completion_handler, const dir& d, const std::filesystem::path& name, std::uint_fast64_t sequence, std::shared_ptr<wal_file_entry> wf) {
        auto wrapped_handler = completion_wrapper<void(std::error_code)>(
            std::move(completion_handler),
            [link_done_event=wf->link_done_event_](auto handler, std::error_code ec) {
              std::invoke(handler, ec, link_done_event);
            });

        asio::dispatch(
            completion_wrapper<void()>(
                completion_handler_fun(std::move(wrapped_handler), wf->get_executor(), wf->strand_, wf->get_allocator()),
                [d, name, sequence, wf](auto completion_handler) {
                  {
                    std::error_code ec;
                    if (wf->state_ == wal_file_entry_state::uninitialized) [[likely]] {
                      if (wf->file.is_open()) throw std::logic_error("wal is already open");
                      wf->state_ = wal_file_entry_state::opening;
                    } else {
                      ec = make_error_code(wal_errc::bad_state);
                    }

                    if (!ec) {
                      wf->file.create(d, name, ec);
                      if (ec) wf->state_ = wal_file_entry_state::uninitialized;
                    }

                    if (ec) {
                      completion_handler.post(ec);
                      return;
                    }
                    wf->name = name;
                  }

                  std::unique_ptr<pos_stream> s = std::make_unique<pos_stream>(wf->file);
                  auto& stream = *s;

                  wf->version = max_version;
                  wf->sequence = sequence;
                  wf->link_offset_ = std::remove_cvref_t<decltype(wf->header_writer_())>::bytes.value();

                  async_write(
                      stream,
                      wf->header_writer_() & xdr_constant(write_variant_type()).as(xdr_variant),
                      completion_wrapper<void(std::error_code)>(
                          std::move(completion_handler),
                          [stream_ptr=std::move(s), wf](auto& h, std::error_code ec) mutable {
                            assert(wf->state_ == wal_file_entry_state::opening);

                            wf->write_offset_ = stream_ptr->position();
                            stream_ptr.reset();
                            if (ec) {
                              wf->state_ = wal_file_entry_state::uninitialized;
                              wf->file.close();
                            } else {
                              wf->state_ = wal_file_entry_state::ready;
                            }

                            if (ec)
                              std::invoke(h, ec);
                            else
                              wf->wal_flusher_.async_flush(false, std::move(h));
                          }));
                }));
      },
      token, d, name, sequence, this->shared_from_this());
}

template<typename Executor, typename Allocator>
template<typename Range, typename CompletionToken>
#if __cpp_concepts >= 201907L
requires std::ranges::input_range<std::remove_reference_t<Range>>
#endif
inline auto wal_file_entry<Executor, Allocator>::async_append(Range&& records, CompletionToken&& token) {
  return async_append(
      write_records_vector(std::ranges::begin(records), std::ranges::end(records), get_allocator()),
      std::forward<CompletionToken>(token));
}

template<typename Executor, typename Allocator>
template<typename CompletionToken>
inline auto wal_file_entry<Executor, Allocator>::async_append(write_records_vector records, CompletionToken&& token) {
  return asio::async_initiate<CompletionToken, void(std::error_code)>(
      [](auto completion_handler, write_records_vector&& records, std::shared_ptr<wal_file_entry> wf, auto on_space_assigned) {
        auto wrapped_handler = completion_handler_fun(std::move(completion_handler), wf->get_executor(), wf->strand_, wf->get_allocator());

        wf->write_records_to_buffer_(std::move(records),
            asio::bind_executor(
                wf->strand_,
                asio::bind_allocator(
                    wf->get_allocator(),
                    [ wf,
                      completion_handler=std::move(wrapped_handler),
                      on_space_assigned=std::move(on_space_assigned)
                    ](std::error_code ec, auto byte_vector) mutable {
                      wf->append_bytes_(std::move(byte_vector), std::move(completion_handler), std::move(on_space_assigned), ec);
                    })));
      },
      token,
      write_records_vector(std::ranges::begin(records), std::ranges::end(records), get_allocator()),
      this->shared_from_this(),
      ++seal_barrier_);
}

template<typename Executor, typename Allocator>
template<typename CompletionToken>
inline auto wal_file_entry<Executor, Allocator>::async_seal(CompletionToken&& token) {
  return asio::async_initiate<CompletionToken, void(std::error_code)>(
      [](auto completion_handler, std::shared_ptr<wal_file_entry> wf) {
        auto ex = asio::make_work_guard(completion_handler, wf->get_executor());
        auto wrapped_handler = completion_wrapper<void(std::error_code)>(
            completion_handler_fun(std::move(completion_handler), wf->get_executor(), wf->strand_, wf->get_allocator()),
            [wf](auto handler, std::error_code ec) mutable {
              if (!ec) [[likely]] {
                assert(wf->state_ == wal_file_entry_state::sealing);
                wf->state_ = wal_file_entry_state::sealed;
              }
              std::invoke(handler, ec);
            });

        wf->seal_barrier_.async_on_ready(
            completion_wrapper<void(std::error_code)>(
                std::move(wrapped_handler),
                [wf](auto completion_handler, std::error_code ec) mutable {
                  if (!ec && wf->state_ != wal_file_entry_state::ready) [[unlikely]]
                    ec = make_error_code(wal_errc::bad_state);
                  if (ec) [[unlikely]] {
                    std::invoke(completion_handler, ec);
                    return;
                  }

                  wf->state_ = wal_file_entry_state::sealing;
                  auto records = write_records_vector(wf->get_allocator());
                  records.emplace_back(std::in_place_type<wal_record_seal>);
                  wf->write_records_to_buffer_(std::move(records),
                      completion_wrapper<void(std::error_code, std::vector<std::byte, rebind_alloc<std::byte>>)>(
                          std::move(completion_handler),
                          [wf](auto completion_handler, std::error_code ec, auto bytes) mutable {
                            wf->append_bytes_(std::move(bytes), std::move(completion_handler), []([[maybe_unused]] std::error_code ec) {}, ec, wal_file_entry_state::sealing);
                          }));
                }));

        std::invoke(wf->seal_barrier_, std::error_code());
      },
      token, this->shared_from_this());
}

template<typename Executor, typename Allocator>
template<typename CompletionToken>
inline auto wal_file_entry<Executor, Allocator>::async_discard_all(CompletionToken&& token) {
  return asio::async_initiate<CompletionToken, void(std::error_code)>(
      [](auto handler, std::shared_ptr<wal_file_entry> wf) {
        auto ex = asio::make_work_guard(handler, wf->get_executor());
        auto wrapped_handler = asio::bind_executor(
            wf->strand_,
            asio::bind_allocator(
                wf->get_allocator(),
                [handler=std::move(handler), ex=std::move(ex)](std::error_code ec) mutable {
                  auto alloc = asio::get_associated_allocator(handler);
                  ex.get_executor().post(
                      [handler=std::move(handler), ec]() mutable {
                        std::invoke(handler, ec);
                      },
                      alloc);
                }));

        wf->strand_.dispatch(
            completion_wrapper<void()>(
                std::move(wrapped_handler),
                [wf](auto handler) {
                  if (wf->state_ != wal_file_entry_state::ready) {
                    std::invoke(handler, make_error_code(wal_errc::bad_state));
                    return;
                  }
                  wf->state_ = wal_file_entry_state::sealing;

                  static constexpr std::array<std::byte, 8> discard_seal{
                    std::byte{0x00}, std::byte{0x00}, std::byte{0x00}, std::byte{0x04}, // seal
                    std::byte{0x00}, std::byte{0x00}, std::byte{0x00}, std::byte{0x00}, // sentinel
                  };
                  asio::async_write_at(wf->file, 28, asio::buffer(discard_seal),
                      completion_wrapper<void(std::error_code, std::size_t)>(
                          std::move(handler),
                          [wf](auto handler, std::error_code ec, [[maybe_unused]] std::size_t bytes) {
                            if (ec) [[unlikely]] {
                              std::invoke(handler, ec);
                              return;
                            }

                            wf->file.async_flush(
                                true,
                                completion_wrapper<void(std::error_code)>(
                                    std::move(handler),
                                    [wf](auto handler, std::error_code ec) {
                                      if (!ec) {
                                        // Update all variables to the empty-file-state.
                                        assert(wf->state_ == wal_file_entry_state::sealing);
                                        wf->state_ = wal_file_entry_state::sealed;
                                        wf->write_offset_ = 36;
                                        wf->link_offset_ = 32;
                                        assert(wf->link_done_event_.ready());
                                      }

                                      assert(!wf->seal_barrier_.ready());
                                      std::invoke(wf->seal_barrier_, ec);

                                      std::invoke(handler, ec);
                                    }));
                          }));
                }),
            wf->get_allocator());
      },
      token, this->shared_from_this());
}

template<typename Executor, typename Allocator>
inline auto wal_file_entry<Executor, Allocator>::write_offset() const noexcept -> typename fd<executor_type>::offset_type {
  return write_offset_;
}

template<typename Executor, typename Allocator>
inline auto wal_file_entry<Executor, Allocator>::link_offset() const noexcept -> typename fd<executor_type>::offset_type {
  return link_offset_;
}

template<typename Executor, typename Allocator>
inline auto wal_file_entry<Executor, Allocator>::has_unlinked_data() const -> bool {
  return write_offset_ != file.size();
}

template<typename Executor, typename Allocator>
template<typename CompletionToken>
inline auto wal_file_entry<Executor, Allocator>::async_records(CompletionToken&& token) const {
  using pos_stream = positional_stream_adapter<const fd<executor_type>&>;

  return asio::async_initiate<CompletionToken, void(std::error_code, records_vector)>(
      [](auto completion_handler, std::shared_ptr<const wal_file_entry> wf) {
        asio::dispatch(
            completion_wrapper<void()>(
                completion_handler_fun(std::move(completion_handler), wf->get_executor(), wf->strand_, wf->get_allocator()),
                [wf](auto completion_handler) {
                  // If we are not in the correct state, refuse the request.
                  if (wf->state_ != wal_file_entry_state::ready && wf->state_ != wal_file_entry_state::sealing && wf->state_ != wal_file_entry_state::sealed) [[unlikely]] {
                    completion_handler.post(make_error_code(wal_errc::bad_state), records_vector(wf->get_allocator()));
                    return;
                  }

                  constexpr auto begin_offset = std::remove_cvref_t<decltype(std::declval<wal_file_entry>().header_reader_())>::bytes.value();
                  std::unique_ptr<pos_stream> s = std::make_unique<pos_stream>(wf->file, begin_offset);
                  auto& stream = *s;

                  wf->read_records_until_(
                      stream,
                      completion_wrapper<void(std::error_code, records_vector)>(
                          std::move(completion_handler),
                          [stream_ptr=std::move(s)](auto& completion_handler, std::error_code ec, records_vector records) mutable {
                            stream_ptr.reset();

                            if (!ec && std::any_of(records.begin(), records.end(),
                                    [](const auto& variant) -> bool {
                                      return std::holds_alternative<wal_record_end_of_records>(variant);
                                    }))
                              ec = make_error_code(wal_errc::bad_read);

                            std::invoke(completion_handler, ec, std::move(records));
                          }),
                      wf->link_offset_,
                      std::make_unique<records_vector>());
                }));
      },
      token, this->shared_from_this());
}

template<typename Executor, typename Allocator>
template<typename CompletionToken, typename OnSpaceAssigned>
inline auto wal_file_entry<Executor, Allocator>::append_bytes_(std::vector<std::byte, rebind_alloc<std::byte>>&& bytes, CompletionToken&& token, OnSpaceAssigned&& space_assigned_event, std::error_code ec, wal_file_entry_state expected_state) {
  return asio::async_initiate<CompletionToken, void(std::error_code)>(
      [](auto completion_handler, std::vector<std::byte, rebind_alloc<std::byte>> bytes, auto space_assigned_event, std::error_code ec, wal_file_entry_state expected_state, std::shared_ptr<wal_file_entry> wf) {
        // When we're done, we'll either have assigned space, or we'll have decided there will be no space assigned.
        // In both cases, the write_offset_ will have been updated, satisfying the space_assigned_event.
        on_scope_exit space_assigned_completion{[&space_assigned_event]() { std::invoke(space_assigned_event, std::error_code()); }};

        // Validate we have the right state to do writes.
        if (!ec) [[likely]] {
          if (wf->state_ != expected_state) [[unlikely]]
            ec = make_error_code(wal_errc::bad_state);
        }
        // Grow the file with new space.
        if (!ec && !bytes.empty()) [[likely]] {
          assert(bytes.size() >= 4u);
          wf->file.truncate(wf->write_offset_ + bytes.size(), ec);
        }

        // If there were any failures, short-circuit before making changes.
        // Also short-circuit if we are not going to write anything.
        if (ec || bytes.empty()) [[unlikely]] {
          auto ex = asio::get_associated_executor(completion_handler, wf->get_executor());
          auto alloc = asio::get_associated_allocator(completion_handler);
          ex.post(
              completion_wrapper<void()>(
                  std::move(completion_handler),
                  [ec](auto h) { std::invoke(h, ec); }),
              alloc);
          return;
        }

        assert(bytes.size() >= 4u);
        const auto bytes_size = bytes.size();

        // Create the next link fanout event.
        // We create a barrier that'll receive completion.
        auto f = fanout<executor_type, void(std::error_code), allocator_type>(wf->get_executor(), wf->get_allocator());
        auto barrier = make_completion_barrier(f, wf->get_executor());
        wf->link_done_event_.async_on_ready(++barrier);

        wf->append_bytes_at_(wf->write_offset_, std::move(bytes), std::move(completion_handler),
            completion_wrapper<void(std::error_code)>(
                std::move(barrier),
                [wf, bytes_size](auto& f, std::error_code ec) {
                  // Before declaring the link "done", we must update the link offset.
                  //
                  // If the barrier holds an error, then for some reason we could not
                  // write anything, and so the link offset will not have moved either.
                  // (The barrier will only hold an error if the recovery protocol
                  // (skip-record write) failed.)
                  if (!ec) [[likely]] wf->link_offset_ += bytes_size;
                  std::invoke(f, ec);
                }),
            f);

        // Update offsets.
        wf->link_done_event_ = std::move(f); // Never throws.
        wf->write_offset_ += bytes_size; // Never throws.
      },
      token, std::move(bytes), std::forward<OnSpaceAssigned>(space_assigned_event), ec, expected_state, this->shared_from_this());
}

template<typename Executor, typename Allocator>
template<typename CompletionToken, typename Barrier, typename Fanout>
inline auto wal_file_entry<Executor, Allocator>::append_bytes_at_(
    typename fd<executor_type>::offset_type write_offset,
    std::vector<std::byte, rebind_alloc<std::byte>>&& bytes, CompletionToken&& token, Barrier&& barrier, Fanout&& f) {
  return asio::async_initiate<CompletionToken, void(std::error_code)>(
      [](auto completion_handler, auto write_offset, std::vector<std::byte, rebind_alloc<std::byte>> bytes, Barrier&& barrier, Fanout&& f, std::shared_ptr<wal_file_entry> wf) {
        auto ex = asio::make_work_guard(completion_handler, wf->get_executor());

        auto bytes_buf = asio::buffer(bytes);
        asio::async_write_at(
            wf->file,
            write_offset,
            bytes_buf + 4u,
            [ wf, write_offset, ex,
              completion_handler=std::move(completion_handler),
              bytes=std::move(bytes),
              barrier=std::forward<Barrier>(barrier),
              f=std::forward<Fanout>(f)
            ](std::error_code ec, [[maybe_unused]] std::size_t nbytes) mutable {
              if (ec) {
                wf->write_skip_record_(write_offset, bytes.size() - 4u,
                    std::move(barrier));

                // Complete the callback, since we know the error-code of its failure.
                auto alloc = asio::get_associated_allocator(completion_handler);
                ex.get_executor().dispatch(
                    [h=std::move(completion_handler), ec]() mutable {
                      std::invoke(h, ec);
                    },
                    std::move(alloc));
              } else {
                f.async_on_ready(std::move(completion_handler));
                wf->write_link_(write_offset,
                    std::array<std::byte, 4>{ bytes[0], bytes[1], bytes[2], bytes[3] },
                    std::move(barrier));
              }
            });
      },
      token, write_offset, std::move(bytes), std::forward<Barrier>(barrier), std::forward<Fanout>(f), this->shared_from_this());
}

template<typename Executor, typename Allocator>
template<typename CompletionToken>
inline auto wal_file_entry<Executor, Allocator>::write_skip_record_(
    typename fd<executor_type>::offset_type write_offset,
    std::size_t bytes, CompletionToken&& token) {
  if (bytes == 0) {
    auto skip_record = std::array<std::byte, 4>{ std::byte{0x00}, std::byte{0x00}, std::byte{0x00}, std::byte{0x01} };
    return write_link_(write_offset, std::move(skip_record), std::forward<CompletionToken>(token));
  }

  assert(bytes >= 4u);
  return asio::async_initiate<CompletionToken, void(std::error_code)>(
      [](auto completion_handler, auto write_offset, std::size_t bytes, std::shared_ptr<wal_file_entry> wf) {
        using pos_stream = positional_stream_adapter<fd<executor_type>&>;

        std::unique_ptr<pos_stream> s = std::make_unique<pos_stream>(wf->file, write_offset);
        auto& stream = *s;

        if (bytes - 4u <= 0xffff'ffffu) {
          return async_write(
              stream,
              ::earnest::xdr_writer<>() & xdr_constant(bytes - 4u).as(xdr_uint32),
              completion_wrapper<void(std::error_code)>(
                  std::move(completion_handler),
              [ wf, write_offset,
                stream_ptr=std::move(s)
              ](auto completion_handler, std::error_code) mutable {
                auto skip_bytes32_record = std::array<std::byte, 4>{ std::byte{0x00}, std::byte{0x00}, std::byte{0x00}, std::byte{0x02} };
                wf->write_link_(write_offset, std::move(skip_bytes32_record), std::move(completion_handler));
              }));
        } else {
          return async_write(
              stream,
              ::earnest::xdr_writer<>() & xdr_constant(bytes - 8u).as(xdr_uint64),
              completion_wrapper<void(std::error_code)>(
                  std::move(completion_handler),
                  [ wf, write_offset,
                    stream_ptr=std::move(s)
                  ](auto completion_handler, std::error_code) mutable {
                    auto skip_bytes64_record = std::array<std::byte, 4>{ std::byte{0x00}, std::byte{0x00}, std::byte{0x00}, std::byte{0x03} };
                    wf->write_link_(write_offset, std::move(skip_bytes64_record), std::move(completion_handler));
                  }));
        }
      },
      token, write_offset, bytes, this->shared_from_this());
}

template<typename Executor, typename Allocator>
template<typename CompletionToken>
inline auto wal_file_entry<Executor, Allocator>::write_link_(
    typename fd<executor_type>::offset_type write_offset,
    std::array<std::byte, 4> bytes, CompletionToken&& token) {
  return asio::async_initiate<CompletionToken, void(std::error_code)>(
      [write_offset, bytes](auto completion_handler, std::shared_ptr<wal_file_entry> wf) {
        using pos_stream = positional_stream_adapter<fd<executor_type>&>;

        wf->wal_flusher_.async_flush(true,
            completion_wrapper<void(std::error_code)>(
                std::move(completion_handler),
                [wf, write_offset, bytes](auto&& handler, std::error_code ec) {
                  if (ec) {
                    std::invoke(handler, ec);
                    return;
                  }

                  std::unique_ptr<pos_stream> s = std::make_unique<pos_stream>(wf->file, write_offset - 4u);
                  auto& stream = *s;
                  async_write(
                      stream,
                      ::earnest::xdr_writer<>() & xdr_constant(bytes).as(xdr_raw_bytes<4>),
                      completion_wrapper<void(std::error_code)>(
                          std::move(handler),
                          [ stream_ptr=std::move(s),
                            wf
                          ](auto&& handler, std::error_code ec) mutable {
                            stream_ptr.reset();
                            if (ec) {
                              std::invoke(handler, ec);
                              return;
                            }

                            wf->wal_flusher_.async_flush(true, std::move(handler));
                          }));
                }));
      },
      token, this->shared_from_this());
}


} /* namespace earnest::detail */
