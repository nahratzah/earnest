#pragma once

#include <cassert>
#include <functional>
#include <iterator>

#include <asio/append.hpp>
#include <asio/associated_allocator.hpp>
#include <asio/associated_executor.hpp>
#include <asio/async_result.hpp>
#include <asio/bind_allocator.hpp>
#include <asio/bind_executor.hpp>
#include <asio/deferred.hpp>
#include <asio/executor_work_guard.hpp>
#include <asio/write_at.hpp>

#include <earnest/detail/byte_stream.h>
#include <earnest/detail/completion_barrier.h>
#include <earnest/detail/completion_handler_fun.h>
#include <earnest/detail/completion_wrapper.h>
#include <earnest/detail/err_deferred.h>
#include <earnest/detail/fanout.h>
#include <earnest/detail/on_scope_exit.h>
#include <earnest/wal_error.h>

namespace earnest::detail {


inline auto operator<<(std::ostream& out, wal_file_entry_state state) -> std::ostream& {
  using namespace std::literals;

  switch (state) {
    default:
      out << "wal_file_entry_state{"sv << static_cast<std::underlying_type_t<wal_file_entry_state>>(state) << "}"sv;
      break;
    case wal_file_entry_state::uninitialized:
      out << "wal_file_entry_state{uninitialized}"sv;
      break;
    case wal_file_entry_state::opening:
      out << "wal_file_entry_state{opening}"sv;
      break;
    case wal_file_entry_state::ready:
      out << "wal_file_entry_state{ready}"sv;
      break;
    case wal_file_entry_state::sealing:
      out << "wal_file_entry_state{sealing}"sv;
      break;
    case wal_file_entry_state::sealed:
      out << "wal_file_entry_state{sealed}"sv;
      break;
    case wal_file_entry_state::failed:
      out << "wal_file_entry_state{failed}"sv;
      break;
  }
  return out;
}


template<typename Executor, typename Allocator>
inline wal_file_entry<Executor, Allocator>::wal_file_entry(const executor_type& ex, allocator_type alloc)
: file(ex),
  alloc_(alloc),
  strand_(ex),
  link_done_event_(ex, alloc),
  wal_flusher_(this->file, alloc),
  unwritten_links_(alloc),
  seal_barrier_(ex, alloc)
{}

template<typename Executor, typename Allocator>
inline auto wal_file_entry<Executor, Allocator>::header_reader_() {
  using namespace std::string_literals;

  return ::earnest::xdr_reader<>()
      & xdr_constant("\013\013earnest.wal"s).as(xdr_raw_bytes<13>)
      & xdr_uint32(version)
      & xdr_processor(
          [this]() -> std::error_code {
            if (version > max_version)
              return make_error_code(wal_errc::bad_version);
            return {};
          })
      & xdr_uint64(sequence);
}

template<typename Executor, typename Allocator>
inline auto wal_file_entry<Executor, Allocator>::header_writer_() const {
  using namespace std::string_literals;

  return ::earnest::xdr_writer<>()
      & xdr_constant("\013\013earnest.wal"s).as(xdr_raw_bytes<13>)
      & xdr_processor(
          [this]() -> std::error_code {
            if (version > max_version)
              return make_error_code(wal_errc::bad_version);
            return {};
          })
      & xdr_uint32(version)
      & xdr_uint64(sequence);
}

template<typename Executor, typename Allocator>
template<typename Stream, typename Acceptor, typename Callback>
#if 0
requires requires(Acceptor acceptor, typename wal_file_entry<Executor, Allocator>::variant_type v) {
  { std::invoke(acceptor, std::move(v)) } -> std::convertible_to<std::error_code>;
}
#endif
auto wal_file_entry<Executor, Allocator>::read_records_until_(Stream& stream, Acceptor&& acceptor, Callback callback, typename fd_type::offset_type end_offset) const -> void {
  if (stream.position() >= end_offset) {
    std::error_code ec;
    if (stream.position() > end_offset) [[unlikely]]
      ec = make_error_code(wal_errc::bad_read);

    std::invoke(callback, ec);
    return;
  }

  async_read(
      stream,
      ::earnest::xdr_reader<>() & xdr_getset<variant_type>(
          [this, acceptor](variant_type v) mutable {
            this->decorate_(v);
            return std::invoke(acceptor, std::move(v));
          }),
      completion_wrapper<void(std::error_code)>(
          std::move(callback),
          [wf=this->shared_from_this(), &stream, end_offset, acceptor](auto& h, std::error_code ec) mutable {
            // We should not end up in a scenario where a record goes over the end-offset.
            if (stream.position() > end_offset) [[unlikely]]
              ec = make_error_code(wal_errc::bad_read);

            if (ec || stream.position() == end_offset) { // Done reading.
              std::invoke(h, ec);
              return;
            }

            wf->read_records_until_(stream, std::move(acceptor), std::move(h), end_offset);
          }));
}

template<typename Executor, typename Allocator>
inline auto wal_file_entry<Executor, Allocator>::decorate_(variant_type& v) const -> void {
  if (std::holds_alternative<wal_record_modify_file32<executor_type>>(v)) {
    std::get<wal_record_modify_file32<executor_type>>(v).wal_file = std::shared_ptr<const fd_type>(
        this->shared_from_this(),
        &this->file);
  }
}

template<typename Executor, typename Allocator>
template<typename Range, typename CompletionToken, typename TransactionValidator>
#if __cpp_concepts >= 201907L
requires std::ranges::input_range<std::remove_reference_t<Range>>
#endif
inline auto wal_file_entry<Executor, Allocator>::async_append(Range&& records, CompletionToken&& token, TransactionValidator&& transaction_validator, move_only_function<void(records_vector)> on_successful_write_callback, bool delay_flush) {
  return async_append(
      write_records_vector(std::ranges::begin(records), std::ranges::end(records), get_allocator()),
      std::forward<CompletionToken>(token),
      std::forward<TransactionValidator>(transaction_validator),
      std::move(on_successful_write_callback),
      delay_flush);
}

template<typename Executor, typename Allocator>
template<typename CompletionToken, typename TransactionValidator>
inline auto wal_file_entry<Executor, Allocator>::async_append(write_records_vector records, CompletionToken&& token, TransactionValidator&& transaction_validator, move_only_function<void(records_vector)> on_successful_write_callback, bool delay_flush) {
  return asio::async_initiate<CompletionToken, void(std::error_code)>(
      [](auto completion_handler, write_records_vector&& records, std::shared_ptr<wal_file_entry> wf, auto on_space_assigned, auto transaction_validator, move_only_function<void(records_vector)> on_successful_write_callback, bool delay_flush) {
        wf->async_append_impl_(
            std::move(records),
            completion_handler_fun(std::move(completion_handler), wf->get_executor()),
            std::move(on_space_assigned),
            std::move(transaction_validator),
            std::move(on_successful_write_callback),
            delay_flush);
      },
      token,
      write_records_vector(std::ranges::begin(records), std::ranges::end(records), get_allocator()),
      this->shared_from_this(),
      ++seal_barrier_,
      std::forward<TransactionValidator>(transaction_validator),
      std::move(on_successful_write_callback),
      delay_flush);
}

template<typename Executor, typename Allocator>
template<typename OnSpaceAssigned, typename TransactionValidator>
inline auto wal_file_entry<Executor, Allocator>::async_append_impl_(write_records_vector records, move_only_function<void(std::error_code)>&& completion_handler, OnSpaceAssigned&& on_space_assigned, TransactionValidator&& transaction_validator, move_only_function<void(records_vector)> on_successful_write_callback, bool delay_flush) -> void {
  write_records_to_buffer_(
      std::move(records),
      asio::bind_executor(
          strand_,
          completion_wrapper<void(std::error_code, std::vector<std::byte, rebind_alloc<std::byte>>, write_record_with_offset_vector)>(
              asio::bind_allocator(
                  get_allocator(),
                  std::move(completion_handler)),
              [ wf=this->shared_from_this(),
                on_space_assigned=std::forward<OnSpaceAssigned>(on_space_assigned),
                transaction_validator=std::forward<TransactionValidator>(transaction_validator),
                on_successful_write_callback=std::move(on_successful_write_callback),
                delay_flush
              ](auto handler, std::error_code ec, auto byte_vector, write_record_with_offset_vector records) mutable {
                assert(wf->strand_.running_in_this_thread());
                wf->append_bytes_(std::move(byte_vector), std::move(handler), std::move(on_space_assigned), ec, wal_file_entry_state::ready, std::move(transaction_validator), std::move(on_successful_write_callback), std::move(records), delay_flush);
              })));
}

template<typename Executor, typename Allocator>
template<typename CompletionToken>
inline auto wal_file_entry<Executor, Allocator>::async_seal(CompletionToken&& token) {
  return asio::async_initiate<CompletionToken, void(std::error_code)>(
      [](auto completion_handler, std::shared_ptr<wal_file_entry> wf) {
        auto wrapped_handler = completion_wrapper<void(std::error_code)>(
            completion_handler_fun(std::move(completion_handler), wf->get_executor(), wf->strand_, wf->get_allocator()),
            [wf](auto handler, std::error_code ec) mutable {
              if (!ec) [[likely]] {
                assert(wf->state_ == wal_file_entry_state::sealing);
                wf->state_ = wal_file_entry_state::sealed;
              }
              std::invoke(handler, ec);
            });

        wf->seal_barrier_.async_on_ready(
            completion_wrapper<void(std::error_code)>(
                std::move(wrapped_handler),
                [wf](auto completion_handler, std::error_code ec) mutable {
                  if (!ec && wf->state_ != wal_file_entry_state::ready) [[unlikely]]
                    ec = make_error_code(wal_errc::bad_state);
                  if (ec) [[unlikely]] {
                    std::invoke(completion_handler, ec);
                    return;
                  }

                  wf->state_ = wal_file_entry_state::sealing;
                  auto records = write_records_vector(wf->get_allocator());
                  records.emplace_back(std::in_place_type<wal_record_seal>);
                  wf->write_records_to_buffer_(std::move(records),
                      completion_wrapper<void(std::error_code, std::vector<std::byte, rebind_alloc<std::byte>>, write_record_with_offset_vector)>(
                          std::move(completion_handler),
                          [wf](auto completion_handler, std::error_code ec, auto bytes, write_record_with_offset_vector records) mutable {
                            wf->append_bytes_(std::move(bytes), std::move(completion_handler), []([[maybe_unused]] std::error_code ec) {}, ec, wal_file_entry_state::sealing, no_transaction_validation(), move_only_function<void(records_vector)>(), std::move(records));
                          }));
                }));

        std::invoke(wf->seal_barrier_, std::error_code());
      },
      token, this->shared_from_this());
}

template<typename Executor, typename Allocator>
template<typename CompletionToken>
inline auto wal_file_entry<Executor, Allocator>::async_discard_all(CompletionToken&& token) {
  return asio::async_initiate<CompletionToken, void(std::error_code)>(
      [](auto handler, std::shared_ptr<wal_file_entry> wf) {
        auto wrapped_handler = completion_handler_fun(std::move(handler), wf->get_executor(), wf->strand_, wf->get_allocator());

        wf->strand_.dispatch(
            completion_wrapper<void()>(
                std::move(wrapped_handler),
                [wf](auto handler) {
                  if (wf->state_ != wal_file_entry_state::ready) {
                    std::invoke(handler, make_error_code(wal_errc::bad_state));
                    return;
                  }
                  wf->state_ = wal_file_entry_state::sealing;

                  static constexpr std::array<std::byte, 8> discard_seal{
                    std::byte{0x00}, std::byte{0x00}, std::byte{0x00}, std::byte{0x04}, // seal
                    std::byte{0x00}, std::byte{0x00}, std::byte{0x00}, std::byte{0x00}, // sentinel
                  };
                  asio::async_write_at(wf->file, 28, asio::buffer(discard_seal),
                      completion_wrapper<void(std::error_code, std::size_t)>(
                          std::move(handler),
                          [wf](auto handler, std::error_code ec, [[maybe_unused]] std::size_t bytes) {
                            if (ec) [[unlikely]] {
                              std::invoke(handler, ec);
                              return;
                            }

                            wf->file.async_flush(
                                true,
                                completion_wrapper<void(std::error_code)>(
                                    std::move(handler),
                                    [wf](auto handler, std::error_code ec) {
                                      if (!ec) {
                                        // Update all variables to the empty-file-state.
                                        assert(wf->state_ == wal_file_entry_state::sealing);
                                        wf->state_ = wal_file_entry_state::sealed;
                                        wf->write_offset_ = 36;
                                        wf->link_offset_ = 32;
                                        assert(wf->link_done_event_.ready());
                                      }

                                      assert(!wf->seal_barrier_.ready());
                                      std::invoke(wf->seal_barrier_, ec);

                                      std::invoke(handler, ec);
                                    }));
                          }));
                }),
            wf->get_allocator());
      },
      token, this->shared_from_this());
}

template<typename Executor, typename Allocator>
inline auto wal_file_entry<Executor, Allocator>::write_offset() const noexcept -> typename fd_type::offset_type {
  return write_offset_;
}

template<typename Executor, typename Allocator>
inline auto wal_file_entry<Executor, Allocator>::link_offset() const noexcept -> typename fd_type::offset_type {
  return link_offset_;
}

template<typename Executor, typename Allocator>
inline auto wal_file_entry<Executor, Allocator>::has_unlinked_data() const -> bool {
  return write_offset_ != file.size();
}

template<typename Executor, typename Allocator>
template<typename Acceptor, typename CompletionToken>
inline auto wal_file_entry<Executor, Allocator>::async_records(Acceptor&& acceptor, CompletionToken&& token) const {
  return asio::async_initiate<CompletionToken, void(std::error_code)>(
      [](auto completion_handler, std::shared_ptr<const wal_file_entry> wf, std::remove_cvref_t<Acceptor> acceptor) {
        auto handler_alloc = asio::get_associated_allocator(completion_handler, wf->get_allocator());
        wf->async_records_impl_(
            move_only_function<std::error_code(variant_type)>(std::move(acceptor)),
            move_only_function<void(std::error_code)>(
                completion_handler_fun(std::move(completion_handler), wf->get_executor())),
            std::move(handler_alloc));
      },
      token, this->shared_from_this(), std::forward<Acceptor>(acceptor));
}

template<typename Executor, typename Allocator>
template<typename HandlerAllocator>
inline auto wal_file_entry<Executor, Allocator>::async_records_impl_(move_only_function<std::error_code(variant_type)> acceptor, move_only_function<void(std::error_code)> completion_handler, HandlerAllocator handler_alloc) const {
  asio::dispatch(
      completion_wrapper<void()>(
          asio::bind_executor(strand_,
              asio::bind_allocator(handler_alloc,
                  std::move(completion_handler))),
          [wf=this->shared_from_this(), acceptor=std::move(acceptor)](auto completion_handler) mutable {
            assert(wf->strand_.running_in_this_thread());

            // If we are not in the correct state, refuse the request.
            if (wf->state_ != wal_file_entry_state::ready && wf->state_ != wal_file_entry_state::sealing && wf->state_ != wal_file_entry_state::sealed) [[unlikely]] {
              std::invoke(completion_handler, make_error_code(wal_errc::bad_state));
              return;
            }

            auto s = std::make_unique<async_records_reader<typename std::allocator_traits<HandlerAllocator>::template rebind_alloc<std::byte>>>(wf, asio::get_associated_allocator(completion_handler));
            auto& stream = *s;

            auto shared_acceptor = std::allocate_shared<move_only_function<std::error_code(variant_type)>>(wf->get_allocator(), std::move(acceptor));
            wf->read_records_until_(
                stream,
                [acceptor=std::move(shared_acceptor)](variant_type v) mutable -> std::error_code {
                  if (std::holds_alternative<wal_record_end_of_records>(v))
                    return make_error_code(wal_errc::bad_read);
                  return std::invoke(*acceptor, std::move(v));
                },
                completion_wrapper<void(std::error_code)>(
                    std::move(completion_handler),
                    [stream_ptr=std::move(s)](auto& completion_handler, std::error_code ec) mutable {
                      stream_ptr.reset(); // Not really needed, but silences compiler warning.
                      std::invoke(completion_handler, ec);
                    }),
                wf->link_offset_);
          }));
}

template<typename Executor, typename Allocator>
template<typename CompletionToken>
inline auto wal_file_entry<Executor, Allocator>::async_records(CompletionToken&& token) const {
  return asio::async_initiate<CompletionToken, void(std::error_code, records_vector)>(
      [](auto completion_handler, std::shared_ptr<const wal_file_entry> wf) {
        auto records_ptr = std::make_unique<records_vector>(wf->get_allocator());
        auto& records_ref = *records_ptr;

        wf->async_records(
            [&records_ref](variant_type v) -> std::error_code {
              records_ref.emplace_back(std::move(v));
              return {};
            },
            completion_wrapper<void(std::error_code)>(
                std::move(completion_handler),
                [wf, records_ptr=std::move(records_ptr)](auto handler, std::error_code ec) {
                  std::invoke(handler, ec, *records_ptr);
                }));
      },
      token, this->shared_from_this());
}

template<typename Executor, typename Allocator>
template<typename CompletionToken, typename OnSpaceAssigned, typename TransactionValidator>
inline auto wal_file_entry<Executor, Allocator>::append_bytes_(std::vector<std::byte, rebind_alloc<std::byte>>&& bytes, CompletionToken&& token, OnSpaceAssigned&& space_assigned_event, std::error_code ec, wal_file_entry_state expected_state, TransactionValidator&& transaction_validator, move_only_function<void(records_vector)> on_successful_write_callback, write_record_with_offset_vector records, bool delay_flush) {
  return asio::async_initiate<CompletionToken, void(std::error_code)>(
      [](auto completion_handler, std::vector<std::byte, rebind_alloc<std::byte>> bytes, auto space_assigned_event, std::error_code ec, wal_file_entry_state expected_state, std::shared_ptr<wal_file_entry> wf, auto transaction_validator, move_only_function<void(records_vector)> on_successful_write_callback, write_record_with_offset_vector records, bool delay_flush) {
        // When we're done, we'll either have assigned space, or we'll have decided there will be no space assigned.
        // In both cases, the write_offset_ will have been updated, satisfying the space_assigned_event.
        on_scope_exit space_assigned_completion{[&space_assigned_event]() { std::invoke(space_assigned_event, std::error_code()); }};

        // Validate we have the right state to do writes.
        if (!ec) [[likely]] {
          if (wf->state_ != expected_state) [[unlikely]]
            ec = make_error_code(wal_errc::bad_state);
        }
        // Grow the file with new space.
        if (!ec && !bytes.empty()) [[likely]] {
          assert(bytes.size() >= 4u);
          wf->file.truncate(wf->write_offset_ + bytes.size(), ec);
        }

        // If there were any failures, short-circuit before making changes.
        // Also short-circuit if we are not going to write anything.
        if (ec || bytes.empty()) [[unlikely]] {
          auto ex = asio::get_associated_executor(completion_handler, wf->get_executor());
          auto alloc = asio::get_associated_allocator(completion_handler);
          ex.post(
              completion_wrapper<void()>(
                  std::move(completion_handler),
                  [ec](auto h) { std::invoke(h, ec); }),
              alloc);
          return;
        }

        assert(bytes.size() >= 4u);
        const auto bytes_size = bytes.size();

        auto converted_records = std::allocate_shared<records_vector>(wf->get_allocator(), wf->get_allocator());
        std::transform(
            records.begin(), records.end(),
            std::back_inserter(*converted_records),
            [ fd=std::shared_ptr<const fd_type>(wf, &wf->file),
              write_offset=wf->write_offset_
            ](const write_record_with_offset& r) {
              wal_record_write_to_read_converter<fd_type, variant_type> convert(fd, write_offset - 4u + r.offset);
              return convert(r.record);
            });

        // Create the next link fanout event.
        // We create a barrier that'll receive completion.
        auto f = fanout<executor_type, void(std::error_code), allocator_type>(wf->get_executor(), wf->get_allocator());
        auto barrier = make_completion_barrier(
            completion_wrapper<void(std::error_code)>(
                asio::bind_executor(wf->strand_, f),
                [ on_successful_write_callback=std::move(on_successful_write_callback),
                  wf, bytes_size, converted_records
                ](auto&& f, std::error_code ec) -> void {
                  assert(wf->strand_.running_in_this_thread());

                  // Before declaring the link "done", we must update the link offset.
                  //
                  // If the barrier holds an error, then for some reason we could not
                  // write anything, and so the link offset will not have moved either.
                  // (The barrier will only hold an error if the recovery protocol
                  // (skip-record write) failed.)
                  wf->link_offset_ += bytes_size;

                  // And now we can update the write-callback.
                  if (!ec && on_successful_write_callback) std::invoke(on_successful_write_callback, std::move(*converted_records));

                  std::invoke(f, ec);
                }),
            wf->get_executor());
        wf->link_done_event_.async_on_ready(++barrier);

        const auto bound_transaction_validator = []([[maybe_unused]] auto& lde, [[maybe_unused]] TransactionValidator&& transaction_validator) {
                                                   if constexpr(std::is_same_v<no_transaction_validation, std::remove_cvref_t<TransactionValidator>>) {
                                                     return transaction_validator;
                                                   } else {
                                                     return lde.async_on_ready(asio::deferred)
                                                     | err_deferred(std::move(transaction_validator));
                                                   }
                                                 };

        wf->append_bytes_at_(wf->write_offset_, std::move(bytes), std::move(completion_handler),
            std::move(barrier),
            f,
            bound_transaction_validator(wf->link_done_event_, std::move(transaction_validator)),
            converted_records,
            delay_flush);

        // Update offsets.
        wf->link_done_event_ = std::move(f); // Never throws.
        wf->write_offset_ += bytes_size; // Never throws.
      },
      token, std::move(bytes), std::forward<OnSpaceAssigned>(space_assigned_event), ec, expected_state, this->shared_from_this(), std::forward<TransactionValidator>(transaction_validator), std::move(on_successful_write_callback), std::move(records), delay_flush);
}

template<typename Executor, typename Allocator>
template<typename CompletionToken, typename Barrier, typename Fanout, typename DeferredTransactionValidator>
inline auto wal_file_entry<Executor, Allocator>::append_bytes_at_(
    typename fd_type::offset_type write_offset,
    std::vector<std::byte, rebind_alloc<std::byte>>&& bytes, CompletionToken&& token, Barrier&& barrier, Fanout&& f, DeferredTransactionValidator&& deferred_transaction_validator, std::shared_ptr<records_vector> converted_records, bool delay_flush) {
  return asio::async_initiate<CompletionToken, void(std::error_code)>(
      [](auto completion_handler, auto write_offset, std::vector<std::byte, rebind_alloc<std::byte>> bytes, auto barrier, auto f, std::shared_ptr<wal_file_entry> wf, auto deferred_transaction_validator, std::shared_ptr<records_vector> converted_records, bool delay_flush) -> void {
        // Create functor that wraps the transaction validator, and the write-completion callback.
        // If there is no transaction validator, we won't link in a related barrier.
        auto wrap_handler =
            [ completion_handler=std::move(completion_handler),
              barrier=std::move(barrier),
              f=std::move(f),
              bytes_size=bytes.size(),
              link=std::array<std::byte, 4>{ bytes[0], bytes[1], bytes[2], bytes[3] },
              converted_records=std::move(converted_records),
              wf, write_offset, delay_flush
            ]([[maybe_unused]] auto deferred_transaction_validator) mutable {
              auto wrapper = completion_wrapper<void(std::error_code)>(
                  completion_handler_fun(std::move(completion_handler), wf->get_executor(), wf->strand_, wf->get_allocator()),
                  [ wf, write_offset,
                    barrier=std::move(barrier),
                    converted_records=std::move(converted_records),
                    f=std::move(f),
                    bytes_size,
                    link,
                    delay_flush
                  ](auto completion_handler, std::error_code ec) mutable {
                    assert(wf->strand_.running_in_this_thread());

                    if (ec) {
                      converted_records->clear(); // So that the barrier-invocation won't send those to a successful-write-callback.
                      wf->write_skip_record_(write_offset, bytes_size - 4u, std::move(barrier));

                      // Complete the callback, since we know the error-code of its failure.
                      std::invoke(completion_handler, ec);
                    } else if (delay_flush && wf->must_flush_offset_ < write_offset) {
                      unwritten_link* ulink = nullptr;
                      if (wf->unwritten_links_.empty() || wf->unwritten_links_.back().offset < write_offset - 4u) {
                        ulink = &wf->unwritten_links_.emplace_back(wf->get_executor(), write_offset - 4u, link, wf->get_allocator());
                      } else {
                        auto insert_pos = std::lower_bound(wf->unwritten_links_.cbegin(), wf->unwritten_links_.cend(), write_offset - 4u,
                            overload(
                                [](const unwritten_link& x, typename fd_type::offset_type y) {
                                  return x.offset < y;
                                },
                                [](typename fd_type::offset_type x, const unwritten_link& y) {
                                  return x < y.offset;
                                }));
                        assert(insert_pos == wf->unwritten_links_.cend() || insert_pos->offset >= write_offset);
                        ulink = &*wf->unwritten_links_.emplace(insert_pos, wf->get_executor(), write_offset - 4u, link, wf->get_allocator());
                      }

                      // We promise we'll complete the link successfully at some later time.
                      f.async_on_ready(std::move(completion_handler));
                      std::invoke(barrier, std::error_code{});

                      wf->write_link_(write_offset, link,
                          asio::bind_executor(
                              wf->strand_,
                              completion_wrapper<void(std::error_code)>(
                                  ulink->done,
                                  [wf, write_offset](auto&& handler, std::error_code ec) -> void {
                                    assert(wf->strand_.running_in_this_thread());

                                    if (ec) {
                                      wf->logger->error("file {} is bad: unable to write link (and can't use live recovery)", wf->name.native());
                                    } else {
                                      auto insert_pos = std::lower_bound(wf->unwritten_links_.cbegin(), wf->unwritten_links_.cend(), write_offset - 4u,
                                          overload(
                                              [](const unwritten_link& x, typename fd_type::offset_type y) {
                                                return x.offset < y;
                                              },
                                              [](typename fd_type::offset_type x, const unwritten_link& y) {
                                                return x < y.offset;
                                              }));
                                      assert(insert_pos != wf->unwritten_links_.cend());
                                      wf->unwritten_links_.erase(insert_pos);
                                    }

                                    std::invoke(handler, ec);
                                  })),
                          true);
                    } else {
                      if (wf->must_flush_offset_ < write_offset)
                        wf->must_flush_offset_ = write_offset;

                      std::for_each(wf->unwritten_links_.begin(), wf->unwritten_links_.end(),
                          [&barrier, write_offset](auto& ulink) -> void {
                            if (ulink.offset <= write_offset)
                              ulink.done.async_on_ready(++barrier);
                          });

                      f.async_on_ready(std::move(completion_handler));
                      wf->write_link_(write_offset, link, std::move(barrier));
                    }
                  });

              if constexpr(std::is_same_v<no_transaction_validation, std::remove_cvref_t<DeferredTransactionValidator>>) {
                return wrapper;
              } else {
                // Commit barrier completes when the transaction validator and the write both complete.
                auto commit_barrier = make_completion_barrier(std::move(wrapper), wf->get_executor());
                // Attach the validator.
                std::move(deferred_transaction_validator) | ++commit_barrier;
                return commit_barrier;
              }
            };

        auto bytes_buf = asio::buffer(bytes);
        asio::async_write_at(
            wf->file,
            write_offset,
            bytes_buf + 4u,
            completion_wrapper<void(std::error_code, std::size_t)>(
                wrap_handler(std::forward<DeferredTransactionValidator>(deferred_transaction_validator)),
                [bytes=std::move(bytes)](auto completion_handler, std::error_code ec, [[maybe_unused]] std::size_t nbytes) mutable {
                  bytes.clear();
                  std::invoke(completion_handler, ec);
                }));
      },
      token, write_offset, std::move(bytes), std::forward<Barrier>(barrier), std::forward<Fanout>(f), this->shared_from_this(), std::forward<DeferredTransactionValidator>(deferred_transaction_validator), std::move(converted_records), delay_flush);
}

template<typename Executor, typename Allocator>
template<typename CompletionToken>
inline auto wal_file_entry<Executor, Allocator>::write_skip_record_(
    typename fd_type::offset_type write_offset,
    std::size_t bytes, CompletionToken&& token) {
  if (bytes == 0) {
    auto skip_record = std::array<std::byte, 4>{ std::byte{0x00}, std::byte{0x00}, std::byte{0x00}, std::byte{0x01} };
    return write_link_(write_offset, std::move(skip_record), std::forward<CompletionToken>(token));
  }

  assert(bytes >= 4u);
  return asio::async_initiate<CompletionToken, void(std::error_code)>(
      [](auto completion_handler, auto write_offset, std::size_t bytes, std::shared_ptr<wal_file_entry> wf) {
        using pos_stream = positional_stream_adapter<fd_type&>;

        std::unique_ptr<pos_stream> s = std::make_unique<pos_stream>(wf->file, write_offset);
        auto& stream = *s;

        if (bytes - 4u <= 0xffff'ffffu) {
          return async_write(
              stream,
              ::earnest::xdr_writer<>() & xdr_constant(bytes - 4u).as(xdr_uint32),
              completion_wrapper<void(std::error_code)>(
                  std::move(completion_handler),
                  [ wf, write_offset,
                    stream_ptr=std::move(s)
                  ](auto completion_handler, std::error_code) mutable {
                    auto skip_bytes32_record = std::array<std::byte, 4>{ std::byte{0x00}, std::byte{0x00}, std::byte{0x00}, std::byte{0x02} };
                    wf->write_link_(write_offset, std::move(skip_bytes32_record), std::move(completion_handler));
                  }));
        } else {
          return async_write(
              stream,
              ::earnest::xdr_writer<>() & xdr_constant(bytes - 8u).as(xdr_uint64),
              completion_wrapper<void(std::error_code)>(
                  std::move(completion_handler),
                  [ wf, write_offset,
                    stream_ptr=std::move(s)
                  ](auto completion_handler, std::error_code) mutable {
                    auto skip_bytes64_record = std::array<std::byte, 4>{ std::byte{0x00}, std::byte{0x00}, std::byte{0x00}, std::byte{0x03} };
                    wf->write_link_(write_offset, std::move(skip_bytes64_record), std::move(completion_handler));
                  }));
        }
      },
      token, write_offset, bytes, this->shared_from_this());
}

template<typename Executor, typename Allocator>
template<typename CompletionToken>
inline auto wal_file_entry<Executor, Allocator>::write_link_(
    typename fd_type::offset_type write_offset,
    std::array<std::byte, 4> bytes, CompletionToken&& token,
    bool delay_flush) {
  return asio::async_initiate<CompletionToken, void(std::error_code)>(
      [delay_flush, write_offset, bytes](auto completion_handler, std::shared_ptr<wal_file_entry> wf) {
        using pos_stream = positional_stream_adapter<fd_type&>;

        wf->wal_flusher_.async_flush(true,
            completion_wrapper<void(std::error_code)>(
                std::move(completion_handler),
                [wf, delay_flush, write_offset, bytes](auto&& handler, std::error_code ec) -> void {
                  if (ec) {
                    std::invoke(handler, ec);
                    return;
                  }

                  std::unique_ptr<pos_stream> s = std::make_unique<pos_stream>(wf->file, write_offset - 4u);
                  auto& stream = *s;
                  async_write(
                      stream,
                      ::earnest::xdr_writer<>() & xdr_constant(bytes).as(xdr_raw_bytes<4>),
                      completion_wrapper<void(std::error_code)>(
                          completion_handler_fun(std::move(handler), wf->get_executor(), wf->strand_),
                          [ stream_ptr=std::move(s),
                            wf, delay_flush, write_offset
                          ](auto&& handler, std::error_code ec) mutable -> void {
                            assert(wf->strand_.running_in_this_thread());

                            stream_ptr.reset();
                            if (ec) {
                              std::invoke(handler, ec);
                              return;
                            }

                            wf->wal_flusher_.async_flush(true, std::move(handler),
                                delay_flush && wf->must_flush_offset_ < write_offset);
                          }));
                }),
            delay_flush);
      },
      token, this->shared_from_this());
}


} /* namespace earnest::detail */
